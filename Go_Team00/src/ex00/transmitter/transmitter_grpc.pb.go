// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: transmitter.proto

package transmitter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Transmitter_StreamFrequencies_FullMethodName = "/transmitter.Transmitter/StreamFrequencies"
)

// TransmitterClient is the client API for Transmitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmitterClient interface {
	StreamFrequencies(ctx context.Context, opts ...grpc.CallOption) (Transmitter_StreamFrequenciesClient, error)
}

type transmitterClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmitterClient(cc grpc.ClientConnInterface) TransmitterClient {
	return &transmitterClient{cc}
}

func (c *transmitterClient) StreamFrequencies(ctx context.Context, opts ...grpc.CallOption) (Transmitter_StreamFrequenciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transmitter_ServiceDesc.Streams[0], Transmitter_StreamFrequencies_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transmitterStreamFrequenciesClient{stream}
	return x, nil
}

type Transmitter_StreamFrequenciesClient interface {
	Send(*Frequency) error
	Recv() (*Frequency, error)
	grpc.ClientStream
}

type transmitterStreamFrequenciesClient struct {
	grpc.ClientStream
}

func (x *transmitterStreamFrequenciesClient) Send(m *Frequency) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transmitterStreamFrequenciesClient) Recv() (*Frequency, error) {
	m := new(Frequency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransmitterServer is the server API for Transmitter service.
// All implementations must embed UnimplementedTransmitterServer
// for forward compatibility
type TransmitterServer interface {
	StreamFrequencies(Transmitter_StreamFrequenciesServer) error
	mustEmbedUnimplementedTransmitterServer()
}

// UnimplementedTransmitterServer must be embedded to have forward compatible implementations.
type UnimplementedTransmitterServer struct {
}

func (UnimplementedTransmitterServer) StreamFrequencies(Transmitter_StreamFrequenciesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFrequencies not implemented")
}
func (UnimplementedTransmitterServer) mustEmbedUnimplementedTransmitterServer() {}

// UnsafeTransmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmitterServer will
// result in compilation errors.
type UnsafeTransmitterServer interface {
	mustEmbedUnimplementedTransmitterServer()
}

func RegisterTransmitterServer(s grpc.ServiceRegistrar, srv TransmitterServer) {
	s.RegisterService(&Transmitter_ServiceDesc, srv)
}

func _Transmitter_StreamFrequencies_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransmitterServer).StreamFrequencies(&transmitterStreamFrequenciesServer{stream})
}

type Transmitter_StreamFrequenciesServer interface {
	Send(*Frequency) error
	Recv() (*Frequency, error)
	grpc.ServerStream
}

type transmitterStreamFrequenciesServer struct {
	grpc.ServerStream
}

func (x *transmitterStreamFrequenciesServer) Send(m *Frequency) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transmitterStreamFrequenciesServer) Recv() (*Frequency, error) {
	m := new(Frequency)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Transmitter_ServiceDesc is the grpc.ServiceDesc for Transmitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transmitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transmitter.Transmitter",
	HandlerType: (*TransmitterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrequencies",
			Handler:       _Transmitter_StreamFrequencies_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transmitter.proto",
}
